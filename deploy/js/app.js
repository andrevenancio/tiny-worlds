// Generated by CoffeeScript 1.9.3
var App, BaseThreejs, SkyDome, me,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseThreejs = (function() {
  BaseThreejs.prototype.fov = 75;

  BaseThreejs.prototype.near = 1;

  BaseThreejs.prototype.far = 20000;

  function BaseThreejs() {
    this.update = bind(this.update, this);
    this.onResize = bind(this.onResize, this);
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(this.fov, window.innerWidth / window.innerHeight, this.near, this.far);
    this.camera.position.z = 100;
    this.renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: false
    });
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(this.renderer.domElement);
    this.controls = new THREE.OrbitControls(this.camera);
    this.controls.minDistance = 0;
    this.controls.maxDistance = 5000;
    window.addEventListener('resize', this.onResize, false);
    this.init();
    this.onResize();
    this.update();
  }

  BaseThreejs.prototype.onResize = function() {
    var h, w;
    w = window.innerWidth;
    h = window.innerHeight;
    this.renderer.setSize(w, h);
    this.camera.projectionMatrix.makePerspective(this.fov, w / h, this.near, this.far);
    return null;
  };

  BaseThreejs.prototype.update = function() {
    requestAnimationFrame(this.update);
    this.updateScene();
    this.renderer.render(this.scene, this.camera);
    return null;
  };

  BaseThreejs.prototype.init = function() {
    this.addLights();
    this.addScene();
    return null;
  };

  BaseThreejs.prototype.addLights = function() {
    return null;
  };

  BaseThreejs.prototype.addScene = function() {
    return null;
  };

  BaseThreejs.prototype.updateScene = function() {
    return null;
  };

  return BaseThreejs;

})();

SkyDome = (function() {
  function SkyDome(size) {
    var geometry, material;
    if (size == null) {
      size = 5000;
    }
    geometry = new THREE.SphereGeometry(size, 32, 32);
    material = new THREE.MeshBasicMaterial({
      color: 0x336699,
      wireframe: false,
      side: THREE.BackSide
    });
    this.mesh = new THREE.Mesh(geometry, material);
  }

  return SkyDome;

})();

App = (function(superClass) {
  extend(App, superClass);

  function App() {
    App.__super__.constructor.call(this);
  }

  App.prototype.addLights = function() {
    this.ambient = new THREE.AmbientLight(0x444444);
    this.scene.add(this.ambient);
    this.light = new THREE.SpotLight(0xffffff, 1, 0, Math.PI / 2, 1);
    this.light.position.set(0, 0, 5000);
    this.light.target.position.set(0, 0, 0);
    this.scene.add(this.light);
    return null;
  };

  App.prototype.addScene = function() {
    var center;
    center = new THREE.AxisHelper(5);
    this.scene.add(center);
    this.dome = new SkyDome(5000);
    this.scene.add(this.dome.mesh);
    return null;
  };

  App.prototype.updateScene = function() {
    return null;
  };

  return App;

})(BaseThreejs);

(me = function() {
  var args;
  args = ['\n%ctiny%cworlds\n\n', 'background: #1A1A1A; color: #00ffff; font-size: x-large;', 'background: #00ffff; color: #1A1A1A; font-size: x-large;'];
  window.app = new App();
  return null;
})();
